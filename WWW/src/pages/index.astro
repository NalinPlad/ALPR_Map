---
import Layout from '../layouts/Layout.astro';
import "../styles/global.css";
---

<Layout>
	<div class="h-screen w-screen max-w-full max-h-full flex flex-col">
		<div class="flex h-5/6 w-full">
			<div id="map" class="w-3/4 h-full flex items-center justify-center text-5xl text-white font-mono">Loading Data...</div>
			<div class="bg-backdrop border-l-2 border-white w-1/4 h-full p-2 overflow-y-scroll text-white">
				<div>
					<h1 class="text-xl font-mono"><b>flock.ajith.fyi</b> ~~~</h1>
					<i>Analyzing public audit data from Flock transparency portals</i>
					
					<div class="w-full h-2 bg-slate-400 mt-3"></div>
					<br/>
				</div>

				<div>
					<div class="flex flex-col items-center mb-5">
						<b id="t_label" class="font-mono mb-2">~~~</b>
						<input type="button" id="pausebutton" class="mb-2 bg-backdark p-2 rounded-lg text-amber-300 font-bold cursor-pointer"/>
						<input type="range" id="t_slider" class="w-3/4" />
					</div>
				</div>

				<div id="info"></div>
			</div>
		</div>
		<div class="w-full h-1/6 bg-backdrop border-t-2 border-white flex flex-col items-center justify-center text-white">
			
		</div>
	</div>


	<script>
		// https://github.com/xtk93x/Leaflet.TileLayer.ColorFilter
		"use strict";L.TileLayer.ColorFilter=L.TileLayer.extend({intialize:function(t,i){L.TileLayer.prototype.initialize.call(this,t,i)},colorFilter:function(){var r=["blur:px","brightness:%","bright:brightness:%","bri:brightness:%","contrast:%","con:contrast:%","grayscale:%","gray:grayscale:%","hue-rotate:deg","hue:hue-rotate:deg","hue-rotation:hue-rotate:deg","invert:%","inv:invert:%","opacity:%","op:opacity:%","saturate:%","saturation:saturate:%","sat:saturate:%","sepia:%","sep:sepia:%"];return(this.options.filter?this.options.filter:[]).map(function(t){var i=t.toLowerCase().split(":");if(2===i.length){var e=r.find(function(t){return t.split(":")[0]===i[0]});if(e)return e=e.split(":"),i[1]+=/^\d+$/.test(i[1])?e[e.length-1]:"","".concat(e[e.length-2],"(").concat(i[1],")")}return""}).join(" ")},_initContainer:function(){L.TileLayer.prototype._initContainer.call(this);this._container.style.filter=this.colorFilter()},updateFilter:function(t){this.options.filter=t,this._container&&(this._container.style.filter=this.colorFilter())}}),L.tileLayer.colorFilter=function(t,i){return new L.TileLayer.ColorFilter(t,i)};
		
		import { sequence } from "astro:middleware";
		import { slide } from "astro:transitions";
		import  initSqlJs  from "sql.js"

		const sqlPromise = await initSqlJs({
			locateFile: file => `https://sql.js.org/dist/${file}`
		});

		const dataPromise = fetch("/audit_db").then(res => res.arrayBuffer());
		const [SQL, buf] = await Promise.all([sqlPromise, dataPromise])
		const db = new SQL.Database(new Uint8Array(buf));


		
		var map = L.map('map').setView([39.6089, -100.0181], 1);

		var dept_pins = []
        let d_hist = []

		let mapfilter = [
			'grayscale:100%',
			'invert:100%',
		];

		L.tileLayer.colorFilter('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
			minZoom: 4,
			maxZoom: 20,
			attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
			filter: mapfilter
		}).addTo(map);

		// 0.dept_slug	1.flock_status	2.name	3.last_updated	4.camera_count	5.vehicles_30_days	6.searches_30_days	7.latitude	8.longitude	9.state_code	10.leaflet object	11.playing	12.line group
		const departments = db.exec("SELECT * FROM departments WHERE flock_status = 200 AND latitude IS NOT NULL AND longitude IS NOT NULL")[0].values;


		var conn_layer = L.layerGroup();
		var conn_dist = L.layerGroup();
		var dot_layer = L.layerGroup();

		function hoverDept(dept){
			dept.setStyle({
				 radius: 7,
				 dashArray: '5',
				 fillOpacity: 1,
				 weight: 2,
				 color: 'black'
			})
		}

		function leaveDept(dept){
			dept.setStyle({
				 radius: 5,
				 fillOpacity: 0.8,
				 color: 'black',
				 fillColor: '#5987bd',
				 dashArray: '',
				 weight: 1,
			})
		}

		// https://stackoverflow.com/questions/18883601/function-to-calculate-distance-between-two-coordinates
		function getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2) {
			var R = 6371; // Radius of the earth in km
			var dLat = deg2rad(lat2-lat1);  // deg2rad below
			var dLon = deg2rad(lon2-lon1); 
			var a = 
				Math.sin(dLat/2) * Math.sin(dLat/2) +
				Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * 
				Math.sin(dLon/2) * Math.sin(dLon/2)
				; 
			var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); 
			var d = R * c; // Distance in km
			return d;
		}

		function deg2rad(deg) {
			return deg * (Math.PI/180)
		}

		function distToHexColor(value) {
    		value = Math.max(0, Math.min(2000, value));
			let hue = 120 - (value / 2000) * 120;
			let h = hue / 360, s = 1, l = 0.5;
			let q = l < 0.5 ? l * (1 + s) : l + s - l * s;
			let p = 2 * l - q;
			let hueToRgb = (p, q, t) => {
				if (t < 0) t += 1;
				if (t > 1) t -= 1;
				if (t < 1 / 6) return p + (q - p) * 6 * t;
				if (t < 1 / 2) return q;
				if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
				return p;
			};
			let r = hueToRgb(p, q, h + 1 / 3);
			let g = hueToRgb(p, q, h);
			let b = hueToRgb(p, q, h - 1 / 3);
			return "#" + ((1 << 24) | (Math.round(r * 255) << 16) | (Math.round(g * 255) << 8) | Math.round(b * 255)).toString(16).slice(1).toUpperCase();
		}

		departments.forEach(dept => {
			// dept[10] = L.marker([dept[7],dept[8]])
			dept[10] = L.circleMarker([dept[7], dept[8]])
			leaveDept(dept[10])

			dept[10].bindPopup(`
				<h3>${dept[2]}</h3>
				${dept[4] ? `<p><b>${dept[4].toLocaleString()}</b> cameras</p>` : ""}
				${dept[5] ? `<p><b>${dept[5].toLocaleString()}</b> vehicles past 30 days</p>` : ""}
				${dept[6] ? `<p><b>${dept[6].toLocaleString()}</b> searches past 30 days</p>` : ""}
			`);

			dept[10].on('mouseover', _ => {hoverDept(dept[10])});
			dept[10].on('mouseout', _ => {leaveDept(dept[10])});

			dept[11] = false


			dept_pins.push(dept[10])

            let connections = db.exec("SELECT * FROM connections WHERE dept_a = \"" + dept[2] + "\" AND dept_b IS NOT NULL")[0]

            if(connections != undefined) {
                
                
                connections = connections.values
                
                
                const p1 = [dept[7],dept[8]]
                
                connections.forEach(connection => {
                    let p2 = db.exec(`SELECT latitude, longitude FROM departments WHERE name = "${connection[2]}" AND latitude IS NOT NULL`)[0]
                    if(p2 != undefined){
                        p2 = p2.values[0]

						// Adding connection line
						conn_layer.addLayer(L.polyline([p1,p2],{
							color: "white",
							opacity: 0.1,
							weight: 1
						}).bringToBack())

						conn_dist.addLayer(L.polyline([p1,p2],{
							color: distToHexColor(getDistanceFromLatLonInKm(p1[0], p1[1], p2[0], p2[1])),
							opacity: 0.1,
							weight: 1
						}).bringToBack())

						// Adding start dot
						dot_layer.addLayer(L.circle([p1[0]+Math.random()*0.01, p1[1] +Math.random()*0.01], {
							color: 'transparent',
							fillColor: 'green',
							fillOpacity: 0.5,
							radius: 100
						}))

						// Adding end dot
						dot_layer.addLayer(L.circle([p2[0]+Math.random()*0.01, p2[1] +Math.random()*0.01], {
							color: 'transparent',
							fillColor: 'red',
							fillOpacity: 0.5,
							radius: 100
						}))
                    }

                });
            }
	
		});

		var dept_layer = L.layerGroup(dept_pins);


		var overlayMaps = {
			"Departments": dept_layer,
			"Connections": conn_layer,
			"Conn. Distance": conn_dist,
			"Dots (R=Recv)": dot_layer
		};

		map.addLayer(conn_dist);
		// map.addLayer(dept_layer);

		var layerControl = L.control.layers(null, overlayMaps).addTo(map);

		const first_time = db.exec("SELECT time FROM searches ORDER BY time ASC LIMIT 1")[0].values[0][0]
		const last_time = db.exec("SELECT time FROM searches ORDER BY time DESC LIMIT 1")[0].values[0][0]

		const searches = db.exec("SELECT * from searches ORDER BY time ASC")[0].values;

		const infobox = document.querySelector("#info")
		const slider = document.querySelector("#t_slider")
		const label = document.querySelector("#t_label")

		slider.min = first_time
		slider.max = last_time
		slider.step = 1
		

		slider.value = first_time
		label.innerText = Date(first_time)

		let c_time = first_time

		// 0.search_dept	1.search_id	2.user_id	3.time	4.camera_count	5.reason
		function draw_searches(time){
			infobox.innerHTML = ""

			const d = new Date(time)
			const hours = d.getHours() % 12 || 12;
			const minutes = d.getMinutes().toString().padStart(2, '0');
			const ampm = d.getHours() >= 12 ? 'PM' : 'AM';
			const month = d.toLocaleString('en-US', { month: 'short' });
			const date = d.getDate();
			const suffix = (date % 10 === 1 && date !== 11) ? 'st' : (date % 10 === 2 && date !== 12) ? 'nd' : (date % 10 === 3 && date !== 13) ? 'rd' : 'th';
			const year = d.getFullYear();
			label.innerText = `${month} ${date}${suffix} ${year}, ${hours}:${minutes} ${ampm}`;

			searches.filter((search) => (search[3] <= time + 1000*60*60*1 && search[3] >= time - 1000*60*60*1)).forEach(search => {
				// if(search[3] <= time && search[3] >= time - 1*60*60*1000) {
					var dp = departments.filter(d => d[0] == search[0])[0]

					// 0.dept_slug	1.flock_status	2.name	3.last_updated	4.camera_count	5.vehicles_30_days	6.searches_30_days	7.latitude	8.longitude	9.state_code	10.leaflet object	11.playing	12.line group
					if(!dp) {
						dp = Array(13).fill("?")
					}

					const search_time = new Date(search[3]);
					const search_time_string = search_time.toLocaleString('en-US', {
						year: '2-digit',
						month: 'numeric',
						day: 'numeric',
						hour: 'numeric',
						minute: '2-digit',
						second: '2-digit',
						hour12: true
					});
					infobox.innerHTML = `<div class="bg-backdark rounded-lg mb-3 p-2"><h1 class="text-sm text-slate-400">${dp[2]} • ${search_time_string}</h1><p class="text-lg align-middle"><i class="align-middle">“${search[5]}”</i><span class="ms-2 text-sm align-middle text-slate-300">${search[4].toLocaleString()} cameras searched</span></p>\n</div>` + infobox.innerHTML
				// }
			})
		}

		slider.addEventListener("input", _ => {
			c_time = parseInt(slider.value)
			draw_searches(c_time)
		})

		draw_searches(c_time)

		var running = true;

		var int = setInterval(_ => {
			c_time += 1000 * 60;
			draw_searches(c_time);
		}, 200);

		const pauseButton = document.querySelector("#pausebutton");
		pauseButton.value = "Stop  ⏸️";

		pauseButton.addEventListener("click", () => {
			if (running) {
				clearInterval(int);
				pauseButton.value = "Play  ▶️";
			} else {
				int = setInterval(_ => {
					c_time += 1000 * 60;
					draw_searches(c_time);
				}, 200);
				pauseButton.value = "Stop  ⏸️";
			}
			running = !running;
		});



		// new method: for each set timeout to do next one based on log of difference between times of this and next search
		
	</script>
</Layout>